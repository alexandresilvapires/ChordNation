
    def changeKey(self, ct, keynumber, isWhite, isPressed):
        """ Given a keynumber (where A=0, the first key in the 88-key keyboard),
        turns that into pressed/unpressed theme color """

        # Based on key, executes command to change the key color
        if(isWhite):
            if(isPressed):
                exec('self.key'+str(keynumber)+'.setStyleSheet("background: '+ct.pressedwhitekeycolor+'")')
            else:
                exec('self.key'+str(keynumber)+'.setStyleSheet("background: '+ct.unpressedwhitekeycolor+'")')
        else:
            if(isPressed):
                exec('self.key'+str(keynumber)+'.setStyleSheet("background: '+ct.pressedblackkeycolor+'")')
            else:
                exec('self.key'+str(keynumber)+'.setStyleSheet("background: '+ct.unpressedblackkeycolor+'")')

    def setChordText(self, ct, chordsymbol, notes, chordnumber):
        """ Given a chord symbol and a list of notes, as well as the number of the chord to change in the window (0-2),
        changes the chord text and note list below to those values, writting them in the ct.todocolor if chordnumber is 0"""

        #Checks if chordnumber is valid
        if(chordnumber not in [0,1,2]):
            raise ValueError("Chordnumber out of range: setChordText(); Must be in [0,2]")

        #Makes the note text from the array, adding spacing between
        notetext = ''
        for i in range(0,len(notes)):
            notetext += notes[i]
            if(i != len(notes)-1):
                notetext += '  '

        #Writes the notes and chord symbol in the text:
        exec('self.chord'+str(chordnumber)+'.setText("'+chordsymbol+'")')
        exec('self.notes'+str(chordnumber)+'.setText("'+notetext+'")')

        if(chordnumber == 0):
            exec('self.chord'+str(chordnumber)+'.setStyleSheet("color: '+ct.todocolor+'")')
            exec('self.notes'+str(chordnumber)+'.setStyleSheet("color: '+ct.todocolor+'")')
        else:
            exec('self.chord'+str(chordnumber)+'.setStyleSheet("color: '+ct.challangetextcolor+'")')
            exec('self.notes'+str(chordnumber)+'.setStyleSheet("color: '+ct.challangetextcolor+'")')

    def setChordTodo(self, ct, chordnumber):
        """ Given a chord number, changes that chord and note label to the ct.donecolor """

        #Checks if chordnumber is valid
        if(chordnumber not in [0,1,2]):
            raise ValueError("Chordnumber out of range: setChordTodo(); Must be in [0,2]")
    
        exec('self.chord'+str(chordnumber)+'.setStyleSheet("color: '+ct.todocolor+'")')
        exec('self.notes'+str(chordnumber)+'.setStyleSheet("color: '+ct.todocolor+'")')

    def setChordDone(self, ct, chordnumber):
        """ Given a chord number, changes that chord and note label to the ct.donecolor """

        #Checks if chordnumber is valid
        if(chordnumber not in [0,1,2]):
            raise ValueError("Chordnumber out of range: setChordDone(); Must be in [0,2]")
    
        exec('self.chord'+str(chordnumber)+'.setStyleSheet("color: '+ct.donecolor+'")')
        exec('self.notes'+str(chordnumber)+'.setStyleSheet("color: '+ct.donecolor+'")')

    def setKeyText(self, key):
        """Given a key, sets the key text to 'Key: givenkey'"""
        self.keylabel.setText('Key: '+key)

    def shiftText(self, ct, newChord, newNotes):
        """ Shifts every chord to the left, adding a new chord in the right """
        self.chord0.setText(self.chord1.text())
        self.notes0.setText(self.notes1.text())

        self.chord1.setText(self.chord2.text())
        self.notes1.setText(self.notes2.text())

        self.chord2.setText(newChord)

        notetext = ''
        for i in range(0,len(newNotes)):
            notetext += newNotes[i]
            if(i != len(newNotes)-1):
                notetext += '  '

        self.notes2.setText(notetext)

    def resetText(self, ct):
        """Turns all notes and chord to blank and default color"""
        
        for i in range(0,3):
            exec('self.chord'+str(i)+'.setText(" ")')
            exec('self.notes'+str(i)+'.setText(" ")')
            if(i == 0):
                exec('self.chord'+str(i)+'.setStyleSheet("color: '+ct.todocolor+'")')
                exec('self.notes'+str(i)+'.setStyleSheet("color: '+ct.todocolor+'")')
            else:
                exec('self.chord'+str(i)+'.setStyleSheet("color: '+ct.challangetextcolor+'")')
                exec('self.notes'+str(i)+'.setStyleSheet("color: '+ct.challangetextcolor+'")')
